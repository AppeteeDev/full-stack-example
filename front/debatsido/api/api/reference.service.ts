/**
 * Débats IDO API
 * API of Débats IDO Project
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Reference } from '../model/reference';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReferenceService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Retrieve a collection of Reference objects
     * This operation supports pagination
     * @param offset The number of items to skip before returning the results
     * @param limit The number of items to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public referenceGet(offset?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public referenceGet(offset?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public referenceGet(offset?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public referenceGet(offset?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/reference`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Reference
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public referencePost(body: Reference, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public referencePost(body: Reference, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public referencePost(body: Reference, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public referencePost(body: Reference, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling referencePost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/reference`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete Reference object
     * Test
     * @param referenceID The Id of a Reference
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public referencesReferenceIDDelete(referenceID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public referencesReferenceIDDelete(referenceID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public referencesReferenceIDDelete(referenceID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public referencesReferenceIDDelete(referenceID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referenceID === null || referenceID === undefined) {
            throw new Error('Required parameter referenceID was null or undefined when calling referencesReferenceIDDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/references/${encodeURIComponent(String(referenceID))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve a Reference object
     * Test
     * @param referenceID The Id of a Reference
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public referencesReferenceIDGet(referenceID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public referencesReferenceIDGet(referenceID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public referencesReferenceIDGet(referenceID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public referencesReferenceIDGet(referenceID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (referenceID === null || referenceID === undefined) {
            throw new Error('Required parameter referenceID was null or undefined when calling referencesReferenceIDGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/references/${encodeURIComponent(String(referenceID))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update Reference object
     * Test
     * @param body 
     * @param referenceID The Id of a Reference
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public referencesReferenceIDPatch(body: Reference, referenceID: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public referencesReferenceIDPatch(body: Reference, referenceID: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public referencesReferenceIDPatch(body: Reference, referenceID: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public referencesReferenceIDPatch(body: Reference, referenceID: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling referencesReferenceIDPatch.');
        }

        if (referenceID === null || referenceID === undefined) {
            throw new Error('Required parameter referenceID was null or undefined when calling referencesReferenceIDPatch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/references/${encodeURIComponent(String(referenceID))}/`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
