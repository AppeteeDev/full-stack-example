# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from DebatIDOAPI.models.base_model_ import Model
from DebatIDOAPI import util


class QuoteModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, text: str=None, type: str=None, complete: float=None):  # noqa: E501
        """QuoteModel - a model defined in Swagger

        :param id: The id of this QuoteModel.  # noqa: E501
        :type id: int
        :param name: The name of this QuoteModel.  # noqa: E501
        :type name: str
        :param text: The text of this QuoteModel.  # noqa: E501
        :type text: str
        :param type: The type of this QuoteModel.  # noqa: E501
        :type type: str
        :param complete: The complete of this QuoteModel.  # noqa: E501
        :type complete: float
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'text': str,
            'type': str,
            'complete': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'text': 'text',
            'type': 'type',
            'complete': 'complete'
        }
        self._id = id
        self._name = name
        self._text = text
        self._type = type
        self._complete = complete

    @classmethod
    def from_dict(cls, dikt) -> 'QuoteModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QuoteModel of this QuoteModel.  # noqa: E501
        :rtype: QuoteModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this QuoteModel.


        :return: The id of this QuoteModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this QuoteModel.


        :param id: The id of this QuoteModel.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this QuoteModel.


        :return: The name of this QuoteModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this QuoteModel.


        :param name: The name of this QuoteModel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def text(self) -> str:
        """Gets the text of this QuoteModel.


        :return: The text of this QuoteModel.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this QuoteModel.


        :param text: The text of this QuoteModel.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def type(self) -> str:
        """Gets the type of this QuoteModel.


        :return: The type of this QuoteModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this QuoteModel.


        :param type: The type of this QuoteModel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def complete(self) -> float:
        """Gets the complete of this QuoteModel.


        :return: The complete of this QuoteModel.
        :rtype: float
        """
        return self._complete

    @complete.setter
    def complete(self, complete: float):
        """Sets the complete of this QuoteModel.


        :param complete: The complete of this QuoteModel.
        :type complete: float
        """
        if complete is None:
            raise ValueError("Invalid value for `complete`, must not be `None`")  # noqa: E501

        self._complete = complete
