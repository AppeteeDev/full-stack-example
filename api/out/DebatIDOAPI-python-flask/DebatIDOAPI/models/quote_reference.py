# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from DebatIDOAPI.models.base_model_ import Model
from DebatIDOAPI.models.quote import Quote
from DebatIDOAPI.models.reference import Reference
from DebatIDOAPI import util

from DebatIDOAPI.models.quote import Quote  # noqa: E501
from DebatIDOAPI.models.reference import Reference  # noqa: E501

class QuoteReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quote_id=None, quote=None, reference_id=None, reference=None):  # noqa: E501
        """QuoteReference - a model defined in OpenAPI

        :param quote_id: The quote_id of this QuoteReference.  # noqa: E501
        :type quote_id: int
        :param quote: The quote of this QuoteReference.  # noqa: E501
        :type quote: Quote
        :param reference_id: The reference_id of this QuoteReference.  # noqa: E501
        :type reference_id: int
        :param reference: The reference of this QuoteReference.  # noqa: E501
        :type reference: Reference
        """
        self.openapi_types = {
            'quote_id': int,
            'quote': Quote,
            'reference_id': int,
            'reference': Reference
        }

        self.attribute_map = {
            'quote_id': 'quoteID',
            'quote': 'quote',
            'reference_id': 'referenceID',
            'reference': 'reference'
        }

        self._quote_id = quote_id
        self._quote = quote
        self._reference_id = reference_id
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt) -> 'QuoteReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The quoteReference of this QuoteReference.  # noqa: E501
        :rtype: QuoteReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quote_id(self):
        """Gets the quote_id of this QuoteReference.


        :return: The quote_id of this QuoteReference.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this QuoteReference.


        :param quote_id: The quote_id of this QuoteReference.
        :type quote_id: int
        """
        if quote_id is None:
            raise ValueError("Invalid value for `quote_id`, must not be `None`")  # noqa: E501

        self._quote_id = quote_id

    @property
    def quote(self):
        """Gets the quote of this QuoteReference.


        :return: The quote of this QuoteReference.
        :rtype: Quote
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this QuoteReference.


        :param quote: The quote of this QuoteReference.
        :type quote: Quote
        """

        self._quote = quote

    @property
    def reference_id(self):
        """Gets the reference_id of this QuoteReference.


        :return: The reference_id of this QuoteReference.
        :rtype: int
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this QuoteReference.


        :param reference_id: The reference_id of this QuoteReference.
        :type reference_id: int
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def reference(self):
        """Gets the reference of this QuoteReference.


        :return: The reference of this QuoteReference.
        :rtype: Reference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this QuoteReference.


        :param reference: The reference of this QuoteReference.
        :type reference: Reference
        """

        self._reference = reference
