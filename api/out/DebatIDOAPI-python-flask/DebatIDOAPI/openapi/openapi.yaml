openapi: 3.0.0
info:
  description: API of Débats IDO Project
  title: Débats IDO API
  version: 1.0.0
servers:
- description: Optional server description, e.g. Internal staging server for testing
  url: /
security:
- ApiKeyAuth: []
paths:
  /protagonist:
    get:
      description: This operation supports pagination
      operationId: protagonist_get
      parameters:
      - description: The number of items to skip before returning the results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          description: A list of protagonists
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/protagonist'
                type: array
          description: A list of protagonists
      summary: Retrieve a collection of Protagonist objects
      tags:
      - Protagonist
      x-openapi-router-controller: DebatIDOAPI.controllers.protagonist_controller
    post:
      operationId: protagonist_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/protagonist'
        required: true
      responses:
        "201":
          description: Created
      summary: Create Protagonist
      tags:
      - Protagonist
      x-openapi-router-controller: DebatIDOAPI.controllers.protagonist_controller
  /protagonists/{protagonistID}/:
    delete:
      description: Test
      operationId: protagonists_protagonist_iddelete
      parameters:
      - description: The Id of a Protagonist
        explode: false
        in: path
        name: protagonistID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Delete Protagonist object
      tags:
      - Protagonist
      x-openapi-router-controller: DebatIDOAPI.controllers.protagonist_controller
    get:
      description: Test
      operationId: protagonists_protagonist_idget
      parameters:
      - description: The Id of a Protagonist
        explode: false
        in: path
        name: protagonistID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: A specific protagonist
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/protagonist'
          description: A protagonist
      summary: Retrieve a Protagonist object
      tags:
      - Protagonist
      x-openapi-router-controller: DebatIDOAPI.controllers.protagonist_controller
    patch:
      description: Test
      operationId: protagonists_protagonist_idpatch
      parameters:
      - description: The Id of a Protagonist
        explode: false
        in: path
        name: protagonistID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/protagonist'
        required: true
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Update Protagonist object
      tags:
      - Protagonist
      x-openapi-router-controller: DebatIDOAPI.controllers.protagonist_controller
  /quote:
    get:
      description: This operation supports pagination
      operationId: quote_get
      parameters:
      - description: The number of items to skip before returning the results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          description: A list of quotes
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/quote'
                type: array
          description: A list of quotes
      summary: Retrieve a collection of Quote objects
      tags:
      - Quote
      x-openapi-router-controller: DebatIDOAPI.controllers.quote_controller
    post:
      operationId: quote_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quote'
        required: true
      responses:
        "201":
          description: Created
      summary: Create Quote
      tags:
      - Quote
      x-openapi-router-controller: DebatIDOAPI.controllers.quote_controller
  /quotes/{quoteID}/:
    delete:
      description: Test
      operationId: quotes_quote_iddelete
      parameters:
      - description: The Id of a Quote
        explode: false
        in: path
        name: quoteID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Delete Quote object
      tags:
      - Quote
      x-openapi-router-controller: DebatIDOAPI.controllers.quote_controller
    get:
      description: Test
      operationId: quotes_quote_idget
      parameters:
      - description: The Id of a Quote
        explode: false
        in: path
        name: quoteID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: A specific quote
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quote'
          description: A quote
      summary: Retrieve a Quote object
      tags:
      - Quote
      x-openapi-router-controller: DebatIDOAPI.controllers.quote_controller
    patch:
      description: Test
      operationId: quotes_quote_idpatch
      parameters:
      - description: The Id of a Quote
        explode: false
        in: path
        name: quoteID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quote'
        required: true
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Update Quote object
      tags:
      - Quote
      x-openapi-router-controller: DebatIDOAPI.controllers.quote_controller
  /quotes/{quoteID}/supports:
    get:
      description: This operation supports pagination
      operationId: quotes_quote_id_supports_get
      parameters:
      - description: The Id of a Quote
        explode: false
        in: path
        name: quoteID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      - description: The number of items to skip before returning the results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          description: A list of childs quotes
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/quote'
                type: array
          description: A list of quotes
      summary: Get list of supports quotes of specific quote
      tags:
      - Quote
      x-openapi-router-controller: DebatIDOAPI.controllers.quote_controller
  /reference:
    get:
      description: This operation supports pagination
      operationId: reference_get
      parameters:
      - description: The number of items to skip before returning the results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          description: A list of references
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/reference'
                type: array
          description: A list of references
      summary: Retrieve a collection of Reference objects
      tags:
      - Reference
      x-openapi-router-controller: DebatIDOAPI.controllers.reference_controller
    post:
      operationId: reference_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reference'
        required: true
      responses:
        "201":
          description: Created
      summary: Create Reference
      tags:
      - Reference
      x-openapi-router-controller: DebatIDOAPI.controllers.reference_controller
  /references/{referenceID}/:
    delete:
      description: Test
      operationId: references_reference_iddelete
      parameters:
      - description: The Id of a Reference
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Delete Reference object
      tags:
      - Reference
      x-openapi-router-controller: DebatIDOAPI.controllers.reference_controller
    get:
      description: Test
      operationId: references_reference_idget
      parameters:
      - description: The Id of a Reference
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: A specific reference
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reference'
          description: A reference
      summary: Retrieve a Reference object
      tags:
      - Reference
      x-openapi-router-controller: DebatIDOAPI.controllers.reference_controller
    patch:
      description: Test
      operationId: references_reference_idpatch
      parameters:
      - description: The Id of a Reference
        explode: false
        in: path
        name: referenceID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reference'
        required: true
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Update Reference object
      tags:
      - Reference
      x-openapi-router-controller: DebatIDOAPI.controllers.reference_controller
  /theme:
    get:
      description: This operation supports pagination
      operationId: theme_get
      parameters:
      - description: The number of items to skip before returning the results
        explode: true
        in: query
        name: offset
        required: false
        schema:
          minimum: 0
          type: integer
        style: form
      - description: The number of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          description: A list of themes
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/theme'
                type: array
          description: A list of themes
      summary: Retrieve a collection of Theme objects
      tags:
      - Theme
      x-openapi-router-controller: DebatIDOAPI.controllers.theme_controller
    post:
      operationId: theme_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/theme'
        required: true
      responses:
        "201":
          description: Created
      summary: Create Theme
      tags:
      - Theme
      x-openapi-router-controller: DebatIDOAPI.controllers.theme_controller
  /themes/{themeID}/:
    delete:
      description: Test
      operationId: themes_theme_iddelete
      parameters:
      - description: The Id of a Theme
        explode: false
        in: path
        name: themeID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Delete Theme object
      tags:
      - Theme
      x-openapi-router-controller: DebatIDOAPI.controllers.theme_controller
    get:
      description: Test
      operationId: themes_theme_idget
      parameters:
      - description: The Id of a Theme
        explode: false
        in: path
        name: themeID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          description: A specific theme
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/theme'
          description: A theme
      summary: Retrieve a Theme object
      tags:
      - Theme
      x-openapi-router-controller: DebatIDOAPI.controllers.theme_controller
    patch:
      description: Test
      operationId: themes_theme_idpatch
      parameters:
      - description: The Id of a Theme
        explode: false
        in: path
        name: themeID
        required: true
        schema:
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/theme'
        required: true
      responses:
        "200":
          description: Success
        "202":
          description: Accepted
        "204":
          description: Request fulfilled, nothing follows
        "403":
          description: Forbidden
        "404":
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: An error occurred
      summary: Update Theme object
      tags:
      - Theme
      x-openapi-router-controller: DebatIDOAPI.controllers.theme_controller
components:
  headers:
    X-RateLimit-Limit:
      description: Request limit per hour
      example: 100
      explode: false
      schema:
        type: integer
      style: simple
    X-RateLimit-Remaining:
      description: Remaining requests for the hour
      example: 94
      explode: false
      schema:
        type: integer
      style: simple
  parameters:
    quoteIDParam:
      description: The Id of a Quote
      explode: false
      in: path
      name: quoteID
      required: true
      schema:
        minimum: 0
        type: integer
      style: simple
    referenceIDParam:
      description: The Id of a Reference
      explode: false
      in: path
      name: referenceID
      required: true
      schema:
        minimum: 0
        type: integer
      style: simple
    themeIDParam:
      description: The Id of a Theme
      explode: false
      in: path
      name: themeID
      required: true
      schema:
        minimum: 0
        type: integer
      style: simple
    protagonistIDParam:
      description: The Id of a Protagonist
      explode: false
      in: path
      name: protagonistID
      required: true
      schema:
        minimum: 0
        type: integer
      style: simple
    offsetParam:
      description: The number of items to skip before returning the results
      explode: true
      in: query
      name: offset
      required: false
      schema:
        minimum: 0
        type: integer
      style: form
    limitParam:
      description: The number of items to return
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: 20
        format: int32
        maximum: 100
        minimum: 1
        type: integer
      style: form
  responses:
    rateLimitHeader:
      description: Default Header for Rate Limit
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'
    GeneralError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: An error occurred
    quote:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/quote'
      description: A quote
    quoteList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/quote'
            type: array
      description: A list of quotes
    reference:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reference'
      description: A reference
    referenceList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/reference'
            type: array
      description: A list of references
    theme:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/theme'
      description: A theme
    themeList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/theme'
            type: array
      description: A list of themes
    protagonist:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/protagonist'
      description: A protagonist
    protagonistList:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/protagonist'
            type: array
      description: A list of protagonists
  schemas:
    error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    referenceType:
      example:
        id: 42
        title: Livre
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
      required:
      - id
      - title
      type: object
    reference:
      example:
        id: 42
        title: Livre
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
        details:
          type: string
        url:
          type: string
        date:
          type: string
        typeID:
          format: int32
          type: integer
        typeTitle:
          type: string
        reliability:
          format: int32
          type: integer
        dateUpdate:
          type: string
        authors:
          items:
            $ref: '#/components/schemas/protagonist'
          type: array
      required:
      - id
      - title
      - typeID
      type: object
    quoteType:
      example:
        id: 42
        title: Opinion
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
      required:
      - id
      - title
      type: object
    quote:
      example:
        title: Faut-il instaurer un revenu de base ?
        typeID: 12
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
        details:
          type: string
        typeID:
          format: int32
          type: integer
        typeTitle:
          type: string
        dateUpdate:
          type: string
        themes:
          items:
            $ref: '#/components/schemas/theme'
          type: array
        references:
          items:
            $ref: '#/components/schemas/reference'
          type: array
        authors:
          items:
            $ref: '#/components/schemas/protagonist'
          type: array
        quoteMains:
          items:
            $ref: '#/components/schemas/quote'
          type: array
        quoteSupports:
          items:
            $ref: '#/components/schemas/quote'
          type: array
      required:
      - id
      - title
      - typeID
      type: object
    quoteLinkType:
      example:
        id: 2
        title: Contre
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
      required:
      - id
      - title
      type: object
    quoteLink:
      example:
        quoteMainID: 1
        quoteSupportID: 2
        typeID: 1
      properties:
        quoteMainID:
          format: int32
          type: integer
        quoteMain:
          $ref: '#/components/schemas/quote'
        quoteSupportID:
          format: int32
          type: integer
        quoteSupport:
          $ref: '#/components/schemas/quote'
        typeID:
          format: int32
          type: integer
        typeTitle:
          type: string
        dateUpdate:
          type: string
      required:
      - quoteMainID
      - quoteSupportID
      - typeID
      type: object
    theme:
      example:
        id: 1
        title: Économique
      properties:
        id:
          format: int32
          type: integer
        title:
          type: string
      required:
      - id
      - title
      type: object
    quoteTheme:
      example:
        themeID: 3
        quoteID: 1
      properties:
        themeID:
          format: int32
          type: integer
        theme:
          $ref: '#/components/schemas/theme'
        quoteID:
          format: int32
          type: integer
        quote:
          $ref: '#/components/schemas/quote'
      required:
      - quoteID
      - themeID
      type: object
    quoteReference:
      properties:
        quoteID:
          format: int32
          type: integer
        quote:
          $ref: '#/components/schemas/quote'
        referenceID:
          format: int32
          type: integer
        reference:
          $ref: '#/components/schemas/reference'
      required:
      - quoteID
      - referenceID
      type: object
    protagonist:
      properties:
        id:
          format: int32
          type: integer
        type:
          enum:
          - person
          - company
          type: string
        name:
          type: string
        link:
          type: string
        photo:
          type: string
        dateUpdate:
          type: string
        person:
          $ref: '#/components/schemas/person'
        company:
          $ref: '#/components/schemas/company'
      required:
      - id
      - name
      - type
      type: object
    quoteAuthor:
      properties:
        quoteID:
          format: int32
          type: integer
        quote:
          $ref: '#/components/schemas/quote'
        authorID:
          format: int32
          type: integer
        author:
          $ref: '#/components/schemas/protagonist'
      required:
      - authorID
      - quoteID
      type: object
    referenceAuthor:
      properties:
        referenceID:
          format: int32
          type: integer
        reference:
          $ref: '#/components/schemas/reference'
        authorID:
          format: int32
          type: integer
        author:
          $ref: '#/components/schemas/protagonist'
      required:
      - authorID
      - referenceID
      type: object
    person:
      properties:
        id:
          format: int32
          type: integer
        surname:
          type: string
        role:
          type: string
        dateUpdate:
          type: string
      required:
      - id
      type: object
    company:
      properties:
        id:
          format: int32
          type: integer
        siret:
          type: string
        dateUpdate:
          type: string
      required:
      - id
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: API_KEY
      type: apiKey
      x-apikeyInfoFunc: DebatIDOAPI.controllers.security_controller_.info_from_ApiKeyAuth
