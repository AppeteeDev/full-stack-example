# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from DebatIDOAPI.models.base_model_ import Model
from DebatIDOAPI.models.protagonist import Protagonist
from DebatIDOAPI import util

from DebatIDOAPI.models.protagonist import Protagonist  # noqa: E501

class Reference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, title=None, details=None, url=None, date=None, type_id=None, type_title=None, reliability=None, date_update=None, authors=None):  # noqa: E501
        """Reference - a model defined in OpenAPI

        :param id: The id of this Reference.  # noqa: E501
        :type id: int
        :param title: The title of this Reference.  # noqa: E501
        :type title: str
        :param details: The details of this Reference.  # noqa: E501
        :type details: str
        :param url: The url of this Reference.  # noqa: E501
        :type url: str
        :param date: The date of this Reference.  # noqa: E501
        :type date: str
        :param type_id: The type_id of this Reference.  # noqa: E501
        :type type_id: int
        :param type_title: The type_title of this Reference.  # noqa: E501
        :type type_title: str
        :param reliability: The reliability of this Reference.  # noqa: E501
        :type reliability: int
        :param date_update: The date_update of this Reference.  # noqa: E501
        :type date_update: str
        :param authors: The authors of this Reference.  # noqa: E501
        :type authors: List[Protagonist]
        """
        self.openapi_types = {
            'id': int,
            'title': str,
            'details': str,
            'url': str,
            'date': str,
            'type_id': int,
            'type_title': str,
            'reliability': int,
            'date_update': str,
            'authors': List[Protagonist]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'details': 'details',
            'url': 'url',
            'date': 'date',
            'type_id': 'typeID',
            'type_title': 'typeTitle',
            'reliability': 'reliability',
            'date_update': 'dateUpdate',
            'authors': 'authors'
        }

        self._id = id
        self._title = title
        self._details = details
        self._url = url
        self._date = date
        self._type_id = type_id
        self._type_title = type_title
        self._reliability = reliability
        self._date_update = date_update
        self._authors = authors

    @classmethod
    def from_dict(cls, dikt) -> 'Reference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The reference of this Reference.  # noqa: E501
        :rtype: Reference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Reference.


        :return: The id of this Reference.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Reference.


        :param id: The id of this Reference.
        :type id: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Reference.


        :return: The title of this Reference.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Reference.


        :param title: The title of this Reference.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def details(self):
        """Gets the details of this Reference.


        :return: The details of this Reference.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Reference.


        :param details: The details of this Reference.
        :type details: str
        """

        self._details = details

    @property
    def url(self):
        """Gets the url of this Reference.


        :return: The url of this Reference.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Reference.


        :param url: The url of this Reference.
        :type url: str
        """

        self._url = url

    @property
    def date(self):
        """Gets the date of this Reference.


        :return: The date of this Reference.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Reference.


        :param date: The date of this Reference.
        :type date: str
        """

        self._date = date

    @property
    def type_id(self):
        """Gets the type_id of this Reference.


        :return: The type_id of this Reference.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Reference.


        :param type_id: The type_id of this Reference.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def type_title(self):
        """Gets the type_title of this Reference.


        :return: The type_title of this Reference.
        :rtype: str
        """
        return self._type_title

    @type_title.setter
    def type_title(self, type_title):
        """Sets the type_title of this Reference.


        :param type_title: The type_title of this Reference.
        :type type_title: str
        """

        self._type_title = type_title

    @property
    def reliability(self):
        """Gets the reliability of this Reference.


        :return: The reliability of this Reference.
        :rtype: int
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability):
        """Sets the reliability of this Reference.


        :param reliability: The reliability of this Reference.
        :type reliability: int
        """

        self._reliability = reliability

    @property
    def date_update(self):
        """Gets the date_update of this Reference.


        :return: The date_update of this Reference.
        :rtype: str
        """
        return self._date_update

    @date_update.setter
    def date_update(self, date_update):
        """Sets the date_update of this Reference.


        :param date_update: The date_update of this Reference.
        :type date_update: str
        """

        self._date_update = date_update

    @property
    def authors(self):
        """Gets the authors of this Reference.


        :return: The authors of this Reference.
        :rtype: List[Protagonist]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Reference.


        :param authors: The authors of this Reference.
        :type authors: List[Protagonist]
        """

        self._authors = authors
