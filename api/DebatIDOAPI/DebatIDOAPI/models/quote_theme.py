# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from DebatIDOAPI.models.base_model_ import Model
from DebatIDOAPI.models.quote import Quote
from DebatIDOAPI.models.theme import Theme
from DebatIDOAPI import util

from DebatIDOAPI.models.quote import Quote  # noqa: E501
from DebatIDOAPI.models.theme import Theme  # noqa: E501

class QuoteTheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, theme_id=None, theme=None, quote_id=None, quote=None):  # noqa: E501
        """QuoteTheme - a model defined in OpenAPI

        :param theme_id: The theme_id of this QuoteTheme.  # noqa: E501
        :type theme_id: int
        :param theme: The theme of this QuoteTheme.  # noqa: E501
        :type theme: Theme
        :param quote_id: The quote_id of this QuoteTheme.  # noqa: E501
        :type quote_id: int
        :param quote: The quote of this QuoteTheme.  # noqa: E501
        :type quote: Quote
        """
        self.openapi_types = {
            'theme_id': int,
            'theme': Theme,
            'quote_id': int,
            'quote': Quote
        }

        self.attribute_map = {
            'theme_id': 'themeID',
            'theme': 'theme',
            'quote_id': 'quoteID',
            'quote': 'quote'
        }

        self._theme_id = theme_id
        self._theme = theme
        self._quote_id = quote_id
        self._quote = quote

    @classmethod
    def from_dict(cls, dikt) -> 'QuoteTheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The quoteTheme of this QuoteTheme.  # noqa: E501
        :rtype: QuoteTheme
        """
        return util.deserialize_model(dikt, cls)

    @property
    def theme_id(self):
        """Gets the theme_id of this QuoteTheme.


        :return: The theme_id of this QuoteTheme.
        :rtype: int
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this QuoteTheme.


        :param theme_id: The theme_id of this QuoteTheme.
        :type theme_id: int
        """
        if theme_id is None:
            raise ValueError("Invalid value for `theme_id`, must not be `None`")  # noqa: E501

        self._theme_id = theme_id

    @property
    def theme(self):
        """Gets the theme of this QuoteTheme.


        :return: The theme of this QuoteTheme.
        :rtype: Theme
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this QuoteTheme.


        :param theme: The theme of this QuoteTheme.
        :type theme: Theme
        """

        self._theme = theme

    @property
    def quote_id(self):
        """Gets the quote_id of this QuoteTheme.


        :return: The quote_id of this QuoteTheme.
        :rtype: int
        """
        return self._quote_id

    @quote_id.setter
    def quote_id(self, quote_id):
        """Sets the quote_id of this QuoteTheme.


        :param quote_id: The quote_id of this QuoteTheme.
        :type quote_id: int
        """
        if quote_id is None:
            raise ValueError("Invalid value for `quote_id`, must not be `None`")  # noqa: E501

        self._quote_id = quote_id

    @property
    def quote(self):
        """Gets the quote of this QuoteTheme.


        :return: The quote of this QuoteTheme.
        :rtype: Quote
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this QuoteTheme.


        :param quote: The quote of this QuoteTheme.
        :type quote: Quote
        """

        self._quote = quote
