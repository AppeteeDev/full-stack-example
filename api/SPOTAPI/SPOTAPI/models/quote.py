# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from SPOTAPI.models.base_model_ import Model
from SPOTAPI.models.protagonist import Protagonist
from SPOTAPI.models.reference import Reference
from SPOTAPI.models.theme import Theme
from SPOTAPI import util

from SPOTAPI.models.protagonist import Protagonist  # noqa: E501
from SPOTAPI.models.reference import Reference  # noqa: E501
from SPOTAPI.models.theme import Theme  # noqa: E501

class Quote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, title=None, details=None, type_id=None, type_title=None, date_update=None, themes=None, references=None, authors=None, quote_mains=None, quote_supports=None):  # noqa: E501
        """Quote - a model defined in OpenAPI

        :param id: The id of this Quote.  # noqa: E501
        :type id: int
        :param title: The title of this Quote.  # noqa: E501
        :type title: str
        :param details: The details of this Quote.  # noqa: E501
        :type details: str
        :param type_id: The type_id of this Quote.  # noqa: E501
        :type type_id: int
        :param type_title: The type_title of this Quote.  # noqa: E501
        :type type_title: str
        :param date_update: The date_update of this Quote.  # noqa: E501
        :type date_update: str
        :param themes: The themes of this Quote.  # noqa: E501
        :type themes: List[Theme]
        :param references: The references of this Quote.  # noqa: E501
        :type references: List[Reference]
        :param authors: The authors of this Quote.  # noqa: E501
        :type authors: List[Protagonist]
        :param quote_mains: The quote_mains of this Quote.  # noqa: E501
        :type quote_mains: List[Quote]
        :param quote_supports: The quote_supports of this Quote.  # noqa: E501
        :type quote_supports: List[Quote]
        """
        self.openapi_types = {
            'id': int,
            'title': str,
            'details': str,
            'type_id': int,
            'type_title': str,
            'date_update': str,
            'themes': List[Theme],
            'references': List[Reference],
            'authors': List[Protagonist],
            'quote_mains': List[Quote],
            'quote_supports': List[Quote]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'details': 'details',
            'type_id': 'typeID',
            'type_title': 'typeTitle',
            'date_update': 'dateUpdate',
            'themes': 'themes',
            'references': 'references',
            'authors': 'authors',
            'quote_mains': 'quoteMains',
            'quote_supports': 'quoteSupports'
        }

        self._id = id
        self._title = title
        self._details = details
        self._type_id = type_id
        self._type_title = type_title
        self._date_update = date_update
        self._themes = themes
        self._references = references
        self._authors = authors
        self._quote_mains = quote_mains
        self._quote_supports = quote_supports

    @classmethod
    def from_dict(cls, dikt) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The quote of this Quote.  # noqa: E501
        :rtype: Quote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Quote.


        :return: The id of this Quote.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Quote.


        :param id: The id of this Quote.
        :type id: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Quote.


        :return: The title of this Quote.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Quote.


        :param title: The title of this Quote.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def details(self):
        """Gets the details of this Quote.


        :return: The details of this Quote.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Quote.


        :param details: The details of this Quote.
        :type details: str
        """

        self._details = details

    @property
    def type_id(self):
        """Gets the type_id of this Quote.


        :return: The type_id of this Quote.
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Quote.


        :param type_id: The type_id of this Quote.
        :type type_id: int
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501

        self._type_id = type_id

    @property
    def type_title(self):
        """Gets the type_title of this Quote.


        :return: The type_title of this Quote.
        :rtype: str
        """
        return self._type_title

    @type_title.setter
    def type_title(self, type_title):
        """Sets the type_title of this Quote.


        :param type_title: The type_title of this Quote.
        :type type_title: str
        """

        self._type_title = type_title

    @property
    def date_update(self):
        """Gets the date_update of this Quote.


        :return: The date_update of this Quote.
        :rtype: str
        """
        return self._date_update

    @date_update.setter
    def date_update(self, date_update):
        """Sets the date_update of this Quote.


        :param date_update: The date_update of this Quote.
        :type date_update: str
        """

        self._date_update = date_update

    @property
    def themes(self):
        """Gets the themes of this Quote.


        :return: The themes of this Quote.
        :rtype: List[Theme]
        """
        return self._themes

    @themes.setter
    def themes(self, themes):
        """Sets the themes of this Quote.


        :param themes: The themes of this Quote.
        :type themes: List[Theme]
        """

        self._themes = themes

    @property
    def references(self):
        """Gets the references of this Quote.


        :return: The references of this Quote.
        :rtype: List[Reference]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Quote.


        :param references: The references of this Quote.
        :type references: List[Reference]
        """

        self._references = references

    @property
    def authors(self):
        """Gets the authors of this Quote.


        :return: The authors of this Quote.
        :rtype: List[Protagonist]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Quote.


        :param authors: The authors of this Quote.
        :type authors: List[Protagonist]
        """

        self._authors = authors

    @property
    def quote_mains(self):
        """Gets the quote_mains of this Quote.


        :return: The quote_mains of this Quote.
        :rtype: List[Quote]
        """
        return self._quote_mains

    @quote_mains.setter
    def quote_mains(self, quote_mains):
        """Sets the quote_mains of this Quote.


        :param quote_mains: The quote_mains of this Quote.
        :type quote_mains: List[Quote]
        """

        self._quote_mains = quote_mains

    @property
    def quote_supports(self):
        """Gets the quote_supports of this Quote.


        :return: The quote_supports of this Quote.
        :rtype: List[Quote]
        """
        return self._quote_supports

    @quote_supports.setter
    def quote_supports(self, quote_supports):
        """Sets the quote_supports of this Quote.


        :param quote_supports: The quote_supports of this Quote.
        :type quote_supports: List[Quote]
        """

        self._quote_supports = quote_supports
